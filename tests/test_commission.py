import pytest
import pandas as pd
import sys
import os

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from execution_handler import FixedCommissionCalculator, SimulatedExecutionHandler
from events import FillEvent, OrderEvent, MarketEvent
from data_handler import CSVDataHandler
from event_bus import EventBus

@pytest.fixture
def fixed_commission_calculator():
    return FixedCommissionCalculator(rate_per_share=0.0035, min_commission=0.35, max_commission_pct=0.01)

@pytest.fixture
def setup_simulated_execution_handler(tmp_path, fixed_commission_calculator):
    events = EventBus()
    csv_dir = tmp_path / "data"
    csv_dir.mkdir()
    aapl_csv_content = """
datetime,open,high,low,close,volume
2023-01-01,100.00,101.00,99.00,100.50,100000
"""
    (csv_dir / "AAPL.csv").write_text(aapl_csv_content)
    data_handler = CSVDataHandler(events, str(csv_dir), ["AAPL"])
    # Ensure bars are updated for the execution handler to have data
    data_handler.update_bars()
    # Clear any MarketEvents generated by data_handler.update_bars()
    while not events.empty():
        events.get()
    return SimulatedExecutionHandler(events, data_handler, commission_calculator=fixed_commission_calculator)

def test_fixed_commission_calculator_per_share(fixed_commission_calculator):
    # Test case: commission based on rate per share
    quantity = 100
    fill_cost = 100 * 100.0  # 100 shares at $100
    expected_commission = 0.0035 * 100  # $0.35
    assert fixed_commission_calculator.calculate_commission(quantity, fill_cost) == expected_commission

def test_fixed_commission_calculator_min_commission(fixed_commission_calculator):
    # Test case: commission hits minimum
    quantity = 10
    fill_cost = 10 * 100.0
    expected_commission = 0.35 # Minimum commission
    assert fixed_commission_calculator.calculate_commission(quantity, fill_cost) == expected_commission

def test_fixed_commission_calculator_max_commission_pct(fixed_commission_calculator):
    # Test case: commission hits max percentage of trade value
    quantity = 10000
    fill_cost = 10000 * 100.0 # $1,000,000
    # Per share: 0.0035 * 10000 = 35
    # Max pct: 0.01 * 1000000 = 10000
    # The current implementation has a max_commission_pct of 0.01, which is 1%.
    # If the per share commission is $35, and 1% of trade value is $10,000, then $35 should be returned.
    # Let's adjust the fill_cost to make the max_commission_pct kick in.
    # If fill_cost is $100, and quantity is 10000, then price is $0.01
    # Commission per share: 0.0035 * 10000 = 35
    # Max commission: 0.01 * 100 = 1
    # So, the commission should be 1.
    fill_cost = 100.0 # Total trade value
    quantity = 10000 # Quantity
    # Per share: 0.0035 * 10000 = 35
    # Max pct: 0.01 * 100 = 1
    expected_commission = 1.0
    assert fixed_commission_calculator.calculate_commission(quantity, fill_cost) == expected_commission

def test_simulated_execution_handler_commission_on_fill(setup_simulated_execution_handler):
    exec_handler = setup_simulated_execution_handler
    events = exec_handler.events

    # Create a market order
    order = OrderEvent("AAPL", "MKT", 100, "BUY")
    exec_handler.execute_order(order)

    # Simulate a market event to trigger fill processing
    market_data_df = exec_handler.bars.get_latest_bars("AAPL", N=1)
    market_event = MarketEvent(market_data_df.index[0]) # Create MarketEvent from timeindex
    exec_handler.update(market_event)

    # Get the fill event from the queue
    fill_event = events.get(False) # Non-blocking get

    assert isinstance(fill_event, FillEvent)
    assert fill_event.commission is not None
    # Based on the dummy data (open=100.00) and quantity=100, fill_cost = 100*100 = 10000
    # Commission should be 0.0035 * 100 = 0.35 (min commission is 0.35, so it's met)
    # Max commission is 0.01 * 10000 = 100
    # So, expected commission is 0.35
    assert fill_event.commission == pytest.approx(0.35)

def test_simulated_execution_handler_commission_on_partial_fill(setup_simulated_execution_handler):
    exec_handler = setup_simulated_execution_handler
    events = exec_handler.events

    # Create a market order with a large quantity to ensure partial fill
    # Assuming volume in CSV is 100000, partial_fill_volume_pct is 1.0
    # So max_fill_quantity will be 100000
    # Let's make order quantity larger than max_fill_quantity
    exec_handler.partial_fill_volume_pct = 0.1 # Set to 10% for easier partial fills
    order = OrderEvent("AAPL", "MKT", 50000, "BUY") # Order for 50000 shares
    exec_handler.execute_order(order)

    # Simulate a market event to trigger fill processing
    market_data_df = exec_handler.bars.get_latest_bars("AAPL", N=1)
    market_event = MarketEvent(market_data_df.index[0])
    exec_handler.update(market_event)

    # Get the first partial fill event
    fill_event1 = events.get(False)
    assert isinstance(fill_event1, FillEvent)
    assert fill_event1.partial_fill == True
    assert fill_event1.commission is not None

    # Expected fill quantity: 10% of 100000 volume = 10000
    # Fill cost: 10000 * 100 = 1000000
    # Commission: 0.0035 * 10000 = 35
    # Max commission: 0.01 * 1000000 = 10000
    assert fill_event1.quantity == 10000
    assert fill_event1.commission == 35.0

    # Simulate another market event for the remaining quantity
    market_data_df = exec_handler.bars.get_latest_bars("AAPL", N=1)
    market_event = MarketEvent(market_data_df.index[0])
    exec_handler.update(market_event)

    # Get the second partial fill event
    fill_event2 = events.get(False)
    assert isinstance(fill_event2, FillEvent)
    assert fill_event2.partial_fill == True
    assert fill_event2.commission is not None

    # Expected fill quantity: 10% of 100000 volume = 10000
    # Fill cost: 10000 * 100 = 1000000
    # Commission: 0.0035 * 10000 = 35
    assert fill_event2.quantity == 10000
    assert fill_event2.commission == 35.0

    # Continue until order is fully filled (remaining 30000 shares)
    for _ in range(3):
        market_data_df = exec_handler.bars.get_latest_bars("AAPL", N=1)
        market_event = MarketEvent(market_data_df.index[0])
        exec_handler.update(market_event)
        fill_event = events.get(False)
        assert isinstance(fill_event, FillEvent)
        assert fill_event.commission == pytest.approx(35.0)

    # After all fills, the order should be gone
    assert order.order_id not in exec_handler.orders
